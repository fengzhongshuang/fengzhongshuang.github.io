<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FengMichel&#39;s Blog</title>
    <description>My blog using Jekyll-Uno</description>
    <link>http://fengzhongshuang.github.io//</link>
    <atom:link href="http://fengzhongshuang.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 01 Mar 2016 22:30:12 +0800</pubDate>
    <lastBuildDate>Tue, 01 Mar 2016 22:30:12 +0800</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>JDBC系列——5 PreparedStatement</title>
        <description>&lt;h3 id=&quot;preparedstatement&quot;&gt;PreparedStatement&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;本文是 JDBC 系列文章的第五篇，本文将对 PreparedStatement 接口进行介绍，由于本人菜鸟一枚，文中若有错误之处，还请各位朋友批评指正，感谢大家花费时间阅读。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PreparedStatement 是用于执行 &lt;strong&gt;动态&lt;/strong&gt; SQL 语句，并返回结果。它是 Statement 接口的子接口。它为用户提供了以下主要方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 执行一条 Select 的 SQL 语句，并返回对应的结果集&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 执行一条无返回值的 DDL 语句，或执行 Data Manipulation Language（DML语句，如 INSERT、UPDATE、DELETE）语句&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 对指定参数位置进行Xxx类型值的赋值，parameterIndex 从 1 开始&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setXxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xxx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 执行一条 SQL 语句，可能返回多个结果。需要配合 getResultSet 或 getUpdateCount 和 getMoreResults 方法一起使用。如果第一个结果是一个 ResultSet 对象，则返回true， 若是一个更新数量或无结果，则返回false&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;PreparedStatement 的方法与 Statement 接口的基本类似，使用上也非常的相似，区别仅在于 Statement 接口的SQL是在实际执行的位置作为参数传入的，而 PreparedStatement 接口的SQL是在 Connection 创建 PreparedStatement 的时候设置的，并且是预编译的，需要通过 setXxx 方法对每个占位符进行赋值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPreparedStatement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost:3306/jdbc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;123456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO users(name) VALUES(?);&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tim&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/03/jdbc-preparedstatement/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/03/jdbc-preparedstatement/</guid>
        
        <category>JDBC</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>MySQL 杂乱知识点</title>
        <description>&lt;h2 id=&quot;mysql-&quot;&gt;MySQL 杂乱知识点&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;时间戳处理
    &lt;ul&gt;
      &lt;li&gt;时间戳转时间
  &lt;code class=&quot;highlighter-rouge&quot;&gt;SQL
  SELECT FROM_UNIXTIME(timestamp, format);
 &lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;时间转时间戳
  &lt;code class=&quot;highlighter-rouge&quot;&gt;SQL
  SELECT UNIX_TIMESTAMP();
 &lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;INSERT INTO .. ON DUPLICATE KEY UPDATE&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当插入行后会导致在一个 &lt;strong&gt;UNIQUE索引&lt;/strong&gt; 或 &lt;strong&gt;PRIMARY KEY&lt;/strong&gt; 中出现重复值，则执行旧行UPDATE；如果不会导致唯一值列重复的问题，则插入新行。&lt;/p&gt;

&lt;p&gt;如果INSERT多行记录，ON DUPLICATE KEY UPDATE后面字段的值使用VALUES()函数处理来保证每条记录都得到修改。
  &lt;code class=&quot;highlighter-rouge&quot;&gt;SQL
  INSERT INTO TABLE (a,b,c) VALUES
    (1,2,3),
    (2,5,7),
    (3,3,6),
    (4,8,2)
  ON DUPLICATE KEY UPDATE b=VALUES(b);
 &lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/mysql-chaos/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/mysql-chaos/</guid>
        
        <category>杂</category>
        
        
        <category>MySQL</category>
        
      </item>
    
      <item>
        <title>Java 杂乱知识点</title>
        <description>&lt;h2 id=&quot;java-&quot;&gt;Java 杂乱知识点&lt;/h2&gt;

&lt;p&gt;本文记录看到的一些杂乱知识点。&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;HashMap、Hashtable、ConcurrentHashMap
    &lt;ul&gt;
      &lt;li&gt;HashMap是线程不安全的，不能用于并发环境中，可能导致数据错误&lt;/li&gt;
      &lt;li&gt;Hashtable是线程安全的，通过对类中的每个方法使用synchronized来控制。虽然能够保证线程安全性，但由于对整个hash表加锁，导致线程竞争激烈的情况下性能极其低下。&lt;/li&gt;
      &lt;li&gt;ConcurrentHashMap是线程安全的，它通过将一个大的Hashtable拆分成多个Segment来实现，每个Segment又相当于一个小的Hashtable，通过这种分段锁的机制，既能够保证线程安全，又保证的性能。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Vector、ArrayList、Collections.synchronizedList
    &lt;ul&gt;
      &lt;li&gt;Vector是线程安全的&lt;/li&gt;
      &lt;li&gt;ArrayList是非线程安全的&lt;/li&gt;
      &lt;li&gt;Collections.synchronizedList可以将分线程安全的List包装成线程安全的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring MVC中线程安全问题
由于Spring MVC中的Controller默认使用 &lt;strong&gt;Singlton&lt;/strong&gt; 方式构建，因此是 &lt;strong&gt;非线程安全的&lt;/strong&gt;，为了解决线程安全问题，可以使用 &lt;strong&gt;Prototype&lt;/strong&gt; 方式构建Controller，或者使用 ThreadLocal 类来保证线程安全。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 26 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/java-chaos-1/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/java-chaos-1/</guid>
        
        <category>杂</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>JDBC系列——4 Statement</title>
        <description>&lt;h3 id=&quot;statement&quot;&gt;Statement&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;本文是 JDBC 系列文章的第四篇，本文将对 Statement 接口进行介绍，由于本人菜鸟一枚，文中若有错误之处，还请各位朋友批评指正，感谢大家花费时间阅读。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Statement 是用于执行静态 SQL 语句，并返回结果。它还有两个子接口，一个用于执行动态 SQL 语句的 PreparedStatement，一个用于执行存储过程或函数的 CallableStatement。本文主要介绍 Statement 接口的使用。它为用户提供了以下主要方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 执行一条 Select 的 SQL 语句，并返回对应的结果集&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 执行一条无返回值的 DDL 语句，或执行 Data Manipulation Language（DML语句，如 INSERT、UPDATE、DELETE）语句&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 释放资源&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 执行一条 SQL 语句，可能返回多个结果。需要配合 getResultSet 或 getUpdateCount 和 getMoreResults 方法一起使用。如果第一个结果是一个 ResultSet 对象，则返回true， 若是一个更新数量或无结果，则返回false&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 返回 execute 返回的结果集&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResultSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 返回 execute 返回的更新数量&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUpdateCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 返回 execute 方法是否还有更多的结果&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMoreResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 将 SQL 语句加入列表中，通过 executeBatch 方法批量执行。&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 清空 SQL 语句列表&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clearBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 批量执行 SQL 列表中的语句，如果全部执行成功，则返回一个更新数量的数组。如果其中的某条语句发生错误，则根据数据库和驱动的支持来判断是继续执行后面的语句还是停止执行。&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 获取执行的 SQL 语句返回的自增主键，如果为生成任何值，则返回一个空的 ResultSet 对象。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getGeneratedKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 执行 SQL 语句，并根据 autoGeneratedKeys 参数的设置返回结果。若为 Statement.RETURN_GENERATED_KEYS，则返回受影响的行数，然后调用 getGeneratedKeys 得到key值，若为 Statement.NO_GENERATED_KEYS，则返回0。&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoGeneratedKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 终止一次 SQL 语句的执行，前提是数据库和驱动都支持。用于多线程环境下。&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;知道 Statement 提供的方法后，我们就用几个实例来简单测试一下。
1. executeQuery 方法
```java
public static void testExecuteQuery() {
    Connection connection = null;
    Statement statement = null;
    ResultSet resultSet = null;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try {
    String sql = &quot;SELECT id, name FROM users&quot;;
    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
    connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jdbc&quot;, &quot;root&quot;, &quot;123456&quot;);
    statement = connection.createStatement();
    resultSet = statement.executeQuery(sql);

    while (resultSet.next()) {
        int id = resultSet.getInt(&quot;id&quot;);
        String name = resultSet.getString(&quot;name&quot;);

        System.out.println(&quot;id = &quot; + id + &quot; name = &quot; + name);
    }
} catch (Exception e) {
    e.printStackTrace();
} finally {
    if (resultSet != null) {
        try {
            resultSet.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    if (statement != null) {
        try {
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    if (connection != null) {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
} } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;executeUpdate 方法
```java
public static void testExecuteUpdate() {
  Connection connection = null;
  Statement statement = null;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;try {
      String sql = “INSERT INTO users(id, name) VALUES(20, ‘Kobe’); “;
      Class.forName(“com.mysql.jdbc.Driver”);
      connection = DriverManager.getConnection(“jdbc:mysql://localhost:3306/jdbc”, “root”, “123456”);
      statement = connection.createStatement();
      int count = statement.executeUpdate(sql);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  System.out.println(&quot;count = &quot; + count);   } catch (Exception e) {
  e.printStackTrace();   } finally {
  if (statement != null) {
      try {
          statement.close();
      } catch (SQLException e) {
          e.printStackTrace();
      }
  }

  if (connection != null) {
      try {
          connection.close();
      } catch (SQLException e) {
          e.printStackTrace();
      }
  }   } } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;executeUpdate 方法 和 getGeneratedKeys 方法
```java
public static void testExecuteUpdateGenerateKeys(){
 Connection connection = null;
 Statement statement = null;&lt;/p&gt;

    &lt;p&gt;try {
     String sql = “INSERT INTO users(name) VALUES(‘Tim’); “;
     Class.forName(“com.mysql.jdbc.Driver”);
     connection = DriverManager.getConnection(“jdbc:mysql://localhost:3306/jdbc”, “root”, “123456”);
     statement = connection.createStatement();
     int count = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
     ResultSet rs = statement.getGeneratedKeys();
     rs.next();
     int key = rs.getInt(1);
     System.out.println(“key = “ + key);
 } catch (Exception e) {
     e.printStackTrace();
 } finally {
     if (statement != null) {
         try {
             statement.close();
         } catch (SQLException e) {
             e.printStackTrace();
         }
     }&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if (connection != null) {
     try {
         connection.close();
     } catch (SQLException e) {
         e.printStackTrace();
     }
 }  } } ```
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;addBatch 方法 和 executeBatch 方法，本例重点比较执行多条大批量插入时，使用 executeBatch 返回和使用 for 循环的方式执行多次 executeUpdate 方法在性能上的差异
```java
public static void testExecuteBatch() {
 Connection connection = null;
 Statement statement = null;
 try {
     Class.forName(“com.mysql.jdbc.Driver”);
     connection = DriverManager.getConnection(“jdbc:mysql://localhost:3306/jdbc”, “root”, “123456”);
     statement = connection.createStatement();&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; for (int i = 0; i &amp;lt; 100000; i++) {
     String sql = &quot;INSERT INTO users(name) VALUES(&#39;Tim &quot; + i + &quot;&#39;); &quot;;
     statement.addBatch(sql);
 }

 statement.executeBatch();  } catch (Exception e) {
 e.printStackTrace();  } finally {
 if (statement != null) {
     try {
         statement.close();
     } catch (SQLException e) {
         e.printStackTrace();
     }
 }

 if (connection != null) {
     try {
         connection.close();
     } catch (SQLException e) {
         e.printStackTrace();
     }
 }  } }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;public static void main(String[] args) {
    long start_batch = System.currentTimeMillis();
    testExecuteBatch();
    long end_batch = System.currentTimeMillis();
    System.out.println(“use executeBatch : “ + (end_batch - start_batch));&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long start_for = System.currentTimeMillis();
testExecuteUpdateUseFor();
long end_for = System.currentTimeMillis();
System.out.println(&quot;use for : &quot; + (end_for - start_for)); }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;/*
use executeBatch : 10185
use for : 7866
*/
```&lt;/p&gt;

&lt;p&gt;经过测试，发现使用 executeBatch 进行批量执行反而效率略差。由于本人经验不足，所以不确定结果是否正确，需要查询一下资料，明日来添加结果分析。&lt;/p&gt;

&lt;font style=&quot;color:red;font-size: 16px;&quot;&gt;此坑难填啦。。。还请知道原因的大牛赐教！&lt;/font&gt;

&lt;hr /&gt;

&lt;p&gt;通过上面的介绍和实例，Statement 接口就介绍忘了，下篇将对子接口 PreparedStatement 进行介绍。&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/jdbc-statement/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/jdbc-statement/</guid>
        
        <category>JDBC</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>JAVA基础</title>
        <description>&lt;h1 id=&quot;j2se&quot;&gt;J2SE&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;strictfp&quot;&gt;1、使用&lt;code class=&quot;highlighter-rouge&quot;&gt;strictfp&lt;/code&gt;关键字标记的方法必须使用严格的浮点计算来产生理想的结果。&lt;/h2&gt;
&lt;p&gt;主要是在不同的处理器上对于浮点数的运算处理的差异导致，为了平衡性能和理想结果做出的选择。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;的异同&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; 是逻辑运算符，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;是位运算符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;都可以用来做逻辑判断，只是前者是** 短路方式 **计算，后者不是 ** 短路方式 **&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;比 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;的运算符优先级 ** 低 **&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 右移运算符、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt;左移运算符&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt;是使用 ** 符号位 **来填充高位
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;是使用 ** 0 **来填充高位
例如：
```java
int num1 = 4 » 2;  // num1 = 2
int num2 = 4 »&amp;gt; 2; // num2 = 2&lt;/p&gt;

&lt;p&gt;int num3 = -4 » 2;  // num3 = -2 (0b11111111111111111111111111111110)
int num4 = -4 »&amp;gt; 2; // num4 = 2147483646 (0b01111111111111111111111111111110)
```
整数的二进制表示&lt;br /&gt;
正数的二进制 = 二进制原码&lt;br /&gt;
负数的二进制 = abs(负数)的二进制的反码 + 1 &lt;br /&gt;
例如：&lt;br /&gt;
5的二进制&lt;/p&gt;

&lt;p&gt;0b00000000000000000000000000000101&lt;/p&gt;

&lt;p&gt;-5的二进制
* 得到5的二进制 0b00000000000000000000000000000101
* 取反 0b11111111111111111111111111111010
* 再加1 0b11111111111111111111111111111011&lt;/p&gt;

&lt;h2 id=&quot;strictmathmath&quot;&gt;4、&lt;code class=&quot;highlighter-rouge&quot;&gt;StrictMath&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;前者提供的方法在任何平台上保证得到相同的结果，后者则追求更高的运算效率。&lt;/p&gt;

&lt;h2 id=&quot;code-unitcode-point-&quot;&gt;5、&lt;code class=&quot;highlighter-rouge&quot;&gt;Code Unit(代码单元)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Code Point(代码点)&lt;/code&gt; ?????&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;6、字符串格式化 ????&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/String_Format.png&quot; alt=&quot;格式说明符&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;7、数组的交集、并集、差集、补集？？？&lt;/h2&gt;

&lt;h2 id=&quot;numberformatdecimalformatmessageformatchoiceformat-&quot;&gt;8、NumberFormat、DecimalFormat、MessageFormat、ChoiceFormat ？？&lt;/h2&gt;

&lt;h2 id=&quot;getterclone&quot;&gt;9、对用对象类型的getter方法，要返回对象的clone&lt;/h2&gt;

&lt;h2 id=&quot;section-4&quot;&gt;10、初始化块、静态初始化块&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;初始化块在每次创建对象的时候都会调用&lt;/li&gt;
  &lt;li&gt;静态初始化块只在创建第一个对象的时候调用，再次创建对象是不会再次调用&lt;/li&gt;
  &lt;li&gt;创建对象时，先执行静态初始化块（仅执行一次），在执行普通初始化块，然后执行构造函数。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果类存在继承关系，那么执行顺序需要特别注意&lt;br /&gt;
```Java
/*
 *Parent Class
 */
public class Parent {
  static {
      System.out.println(“Parent static block”);
  }&lt;/p&gt;

    &lt;p&gt;{
      System.out.println(“Parent common block”);
  }&lt;/p&gt;

    &lt;p&gt;public Parent() {
      System.out.println(“Parent Constructor”);
  }
}
&lt;code class=&quot;highlighter-rouge&quot;&gt;
&lt;/code&gt;Java
/*
 *Child Class
 */
public class Child extends Parent {
  static {
      System.out.println(“Child static block”);
  }&lt;/p&gt;

    &lt;p&gt;{
      System.out.println(“Child common block”);
  }&lt;/p&gt;

    &lt;p&gt;public Child() {
      super();
      System.out.println(“Child Constructor”);
  }
}
&lt;code class=&quot;highlighter-rouge&quot;&gt;
&lt;/code&gt;Java
public class Application {
  public static void main(String[] args) {
      Child c = new Child();
  }
}
/**&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Output:&lt;/li&gt;
  &lt;li&gt;Parent static block&lt;/li&gt;
  &lt;li&gt;Child static block&lt;/li&gt;
  &lt;li&gt;Parent common block&lt;/li&gt;
  &lt;li&gt;Parent Constructor&lt;/li&gt;
  &lt;li&gt;Child common block&lt;/li&gt;
  &lt;li&gt;Child Constructor
 */
```&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;11、静态绑定（前期绑定）和动态绑定（后期绑定）区别对比&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;静态绑定发生在编译时期。 &lt;br /&gt;
动态绑定发生在运行时。&lt;/li&gt;
  &lt;li&gt;使用private或static或final修饰的变量或者方法，使用静态绑定。&lt;br /&gt;
而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。&lt;/li&gt;
  &lt;li&gt;静态绑定使用类信息来完成。&lt;br /&gt;
而动态绑定则需要使用对象信息来完成。&lt;/li&gt;
  &lt;li&gt;重载(Overload)的方法使用静态绑定完成&lt;br /&gt;
 重写(Override)的方法则使用动态绑定完成。&lt;/li&gt;
  &lt;li&gt;动态绑定比静态绑定更耗时。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;equals&quot;&gt;12、编写equals方法&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;显示参数命名位OtherObject，稍后需要将它转换成另一个叫做other的变量&lt;/li&gt;
  &lt;li&gt;检测this与otherObject是否引用同一个对象
&lt;code class=&quot;highlighter-rouge&quot;&gt;Java
if (this == otherObject) return true;
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;检测otherObject是否为null。
*
&lt;code class=&quot;highlighter-rouge&quot;&gt;Java
if (null == otherObject) return false;
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;比较this与otherObject是否属于同一个类，如果equals的语义在每个子类中有所改变，就使用getClass()检测,如果所有的子类都拥有统一的语义，就使用instanceof检测。
  ```Java
  if (getClass != otherObject.getClass()) return false;&lt;/p&gt;

    &lt;p&gt;if(!(otherObject instanceof ClassName)) return false;
  ```&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;将otherObject转换位相应的类类型变量
&lt;code class=&quot;highlighter-rouge&quot;&gt;Java
ClassName other = (ClassName) otherObject;
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;对需要比较的域进行比较，使用==比较基本类型域，使用equals比较对象域，如果所有域都匹配，返回true，否则返回false。&lt;/li&gt;
  &lt;li&gt;如果在子类中重新定义equals，就要调用super.equals(other)。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;13、内部类？？&lt;/h2&gt;

&lt;h2 id=&quot;section-7&quot;&gt;14、代理？？&lt;/h2&gt;
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/java-basic/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/java-basic/</guid>
        
        <category>J2SE</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>JQuery——each函数</title>
        <description>&lt;h2 id=&quot;jqueryeach&quot;&gt;JQuery——each函数&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;本文用于记录JQuery的each函数的定义与用法，使用each可以对筛选出的结果进行遍历，对每个对象执行指定的函数，处理各自的逻辑。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;each() 方法对筛选出来的每个结果指定特定的执行函数。
&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
$(selector).each(function(index,element));
&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;function(index,element)&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;参数指元素的索引，&lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt;参数指元素对象，若未传递，则默认为this。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;实例&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JQury each&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://apps.bdimg.com/libs/jquery/1.9.0/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;background&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#ff0000&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;background&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#00ff00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/jquery-each-1.png&quot; alt=&quot;盒子模型&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/jquery-each/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/jquery-each/</guid>
        
        <category>JQuery</category>
        
        
        <category>JQuery</category>
        
      </item>
    
      <item>
        <title>CSS——盒子模型</title>
        <description>&lt;h2 id=&quot;css&quot;&gt;CSS——盒子模型&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;首先看下盒子模型的图示，从图中可以看出来，盒子模型分为四个部分，分别是 &lt;strong&gt;margin(外边距)、border(边框)、padding(内边距)、content(内容)&lt;/strong&gt;，content就是我们展示文字、图片等信息的区域，padding表示内容与边框之间的空间，margin表示其他盒子模型与当前盒子模型的边框之间的空间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/css-box.png&quot; alt=&quot;盒子模型&quot; /&gt;&lt;/p&gt;

&lt;p&gt;举例说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background:#ff0000; padding: 10px; border: 3px solid #0000ff; margin: 10px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  内容1
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background:#00ff00; padding: 10px; border: 3px solid #0000ff; margin: 10px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  内容2
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/css-box-sample1.png&quot; alt=&quot;实例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过设置margin、border、padding的属性，控制内容所占空间以及与其他内容之间的空间间隔。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/css-box/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/css-box/</guid>
        
        <category>CSS</category>
        
        
        <category>CSS</category>
        
      </item>
    
      <item>
        <title>JDBC系列——3 Connection介绍</title>
        <description>&lt;h3 id=&quot;connection&quot;&gt;Connection&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;本文是 JDBC 系列文章的第三篇，本文将对 Connection 接口进行介绍，由于本人菜鸟一枚，文中若有错误之处，还请各位朋友批评指正，感谢大家花费时间阅读。&lt;/p&gt;

&lt;p&gt;Connection 是指针对特定数据库的连接，SQL 语句的执行和操作结果的返回都是在这个 Connection 的上下文中的。在连接关闭前它将一直持有数据库的连接资源。该接口包括以下常用方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 创建Statement类型对象，然后通过该Statement调用静态SQL语句，操作数据库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createStatement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 创建PreparedStatement类型对象，调用动态SQL语句，操作数据库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 创建CallableStatement类型对象，调用存储过程或函数等SQL语句，操作数据库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CallableStatement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置连接的自动提交模式，默认情况下是true，该模式下所有SQL语句将各自处于各自的事务中，若设置成false，则所有的SQL语句处于一个事务中执行&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 提交当前事务中的所有变更，并释放持有的数据库锁&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 回滚（撤销）当前事务中的所有变更，并释放持有的数据库锁&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 释放连接资源&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 获取数据库连接的元数据&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DatabaseMetaData&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMetaData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置当前连接为只读模式的&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setReadOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 设置事务的隔离级别，分别为TRANSACTION_READ_UNCOMMITTED、TRANSACTION_READ_COMMITTED、TRANSACTION_REPEATABLE_READ、TRANSACTION_SERIALIZABLE，级别由低到高，级别越高一致性越好，但并发能力越差&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTransactionIsolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 创建一个PreparedStatement对象，该对象能够获取自增的主键值&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoGeneratedKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过上面的方法可以知道，Connection 可以帮助我们操作 SQL 语句、设置事务隔离级别以及进行事务处理，完成需要的速记操作，同时也可以获取数据库的相关信息，完成自己的数据库管理工具。&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Feb 2016 18:28:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/jdbc-connection/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/jdbc-connection/</guid>
        
        <category>JDBC</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>JDBC系列——2 JDBC概述</title>
        <description>&lt;h3 id=&quot;jdbc&quot;&gt;JDBC概述&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;本文是 JDBC 系列文章的第二篇，本文将从 JDBC 是什么、JDBC 的用途、JDBC 主要提供的接口或类有哪些、如何使用 JDBC 等方面进行描述，希望能全面的了解 JDBC，由于本人菜鸟一枚，文中若有错误之处，还请各位朋友批评指正，感谢大家花费时间阅读。&lt;/p&gt;

&lt;h4 id=&quot;jdbc-1&quot;&gt;1. JDBC是什么&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;JDBC（Java Database Connectivity, Java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。   &lt;br /&gt;
&lt;span style=&quot;display:block;text-align:right&quot;&gt;——&lt;a href=&quot;http://baike.baidu.com/link?url=HgR0z82Gj_S135c_psHE6NGpJOES2fi9E2O1HymDFGGv5ibdAC-HHC99RKxejHgq7ZWkMgD_ZQ8_hOIvbLn7vK&quot;&gt;百度百科&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从百度百科提供的解释中可以知道，JDBC 为我们提供了访问数据库的统一标准，开发人员无需针对不同的数据库编写不同的程序代码，只需提供一份代码，在变更数据库的时候切换对应的数据库驱动即可。&lt;/p&gt;

&lt;p&gt;使用 JDBC 提供的 API，我们可以对数据库进行以下操作：
* 建立数据库连接
* 执行数据库 SQL 语句
* 处理数据库结果&lt;/p&gt;

&lt;p&gt;JDBC 可以使用在任何需要数据库操作的程序中，当然也可以使用它的更高层次的封装框架，如&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Hibernate&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;MyBatis&lt;/code&gt;等。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;2. 主要接口和类&lt;/h4&gt;
&lt;p&gt;JDBC 提供了操作数据库的统一接口，主要包括以下接口和类：&lt;/p&gt;

&lt;p&gt;2.1 Connection&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.
&lt;span style=&quot;display:block;text-align:right&quot;&gt;——java.sql.Connection&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该接口是数据库通信的上下文，所有的数据库操作都是通过该上下文完成的。内部提供了创建 Statement 的方法和事务管理的相关方法。&lt;/p&gt;

&lt;p&gt;2.2 Driver&lt;/p&gt;

&lt;p&gt;该接口是数据库的驱动接口，数据库厂商必须保证该接口足够小，能够被一次性加载，通过该接口可以获取数据库的属性信息，也可以用于创建 Connection，但一般不这么使用。通常使用 DriverManager 来管理 Driver，DriverManager 可以同时管理多个 Driver，并根据需要&lt;/p&gt;

&lt;p&gt;2.3 DriverManager&lt;/p&gt;

&lt;p&gt;该类用于管理数据库驱动程序的列表。可以获取被管理的每个 Driver 的信息，也可以通过 Driver 列表中的指定 Driver 来获取数据库连接。&lt;/p&gt;

&lt;p&gt;2.4 Statement&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The object used for executing a static SQL statement and returning the results it produces.
&lt;span style=&quot;display:block;text-align:right&quot;&gt;——java.sql.Statement&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该接口用于执行静态 SQL 语句，PreparedStatement 子接口用于执行动态 SQL 语句，CallableStatement 子接口用于执行存储过程或函数。&lt;/p&gt;

&lt;p&gt;2.5 ResultSet&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
&lt;span style=&quot;display:block;text-align:right&quot;&gt;——java.sql.ResultSet&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该接口用于对数据库结果集，将结果集转换成需要的对象类型。&lt;/p&gt;

&lt;p&gt;上述这些接口或类位于&lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql&lt;/code&gt;包中，大家可以自行查阅，当然包中还涉及一些类型的定义以及异常等。&lt;/p&gt;

&lt;p&gt;在 ** JDBC 4.0 **中新增了一些接口和类，被放在&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.sql&lt;/code&gt;包中。其中最重要的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt;接口及&lt;code class=&quot;highlighter-rouge&quot;&gt;PooledConnection&lt;/code&gt;接口，前者用于获取数据库连接，后者提供了数据库连接池管理需要的方法。&lt;/p&gt;

&lt;h4 id=&quot;how-to-use&quot;&gt;3. How-to-use&lt;/h4&gt;

&lt;p&gt;下面以一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; 级别的例子来介绍如何使用 JDBC 操作数据库。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先建立数据库及数据表，并在表中添加数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`users`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Michel&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Jay&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;3&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Micheal&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;4&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Curry&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;创建Java项目，并添加下列代码&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.Statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.ResultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT id, name FROM users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost:3306/jdbc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;123456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; name = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;resultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;项目详见【&lt;a href=&quot;https://github.com/fengzhongshuang/jdbc-demo&quot;&gt;jdbc_demo&lt;/a&gt;】&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 18:28:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/jdbc-summary/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/jdbc-summary/</guid>
        
        <category>JDBC</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>JDBC系列——1 目录</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;目录&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;本文是JDBC系列文章的目录，该系列文章将从以下7个方面对JDBC进行介绍，由于本人菜鸟一枚，文中若有错误之处，还请各位朋友批评指正，感谢大家花费时间阅读。&lt;/p&gt;

&lt;h4 id=&quot;jdbc&quot;&gt;1. JDBC概述&lt;/h4&gt;
&lt;p&gt;简单介绍JDBC的相关概念，包含哪些重要的接口或类，并以MySQL为例，创建第一个JDBC项目&lt;code class=&quot;highlighter-rouge&quot;&gt;JDBC-HelloWorld&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;connection&quot;&gt;2. Connection&lt;/h4&gt;
&lt;p&gt;详细介绍Connection。&lt;/p&gt;

&lt;h4 id=&quot;statement&quot;&gt;3. Statement&lt;/h4&gt;
&lt;p&gt;详细介绍Statement、PreparedStatement、CallableStatement&lt;/p&gt;

&lt;h4 id=&quot;resultset&quot;&gt;4. ResultSet&lt;/h4&gt;
&lt;p&gt;介绍ResultSet，以及ResultSetMetaData获取结果集的元数据。&lt;/p&gt;

&lt;h4 id=&quot;transaction&quot;&gt;5. Transaction&lt;/h4&gt;
&lt;p&gt;介绍使用JDBC创建事务。&lt;/p&gt;

&lt;h4 id=&quot;connection-pool&quot;&gt;6. Connection Pool&lt;/h4&gt;
&lt;p&gt;使用C3P0、DBCP连接池&lt;/p&gt;

&lt;h4 id=&quot;common-dao&quot;&gt;7. Common DAO&lt;/h4&gt;
&lt;p&gt;创建一个自己的简易DAO&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 08:28:00 +0800</pubDate>
        <link>http://fengzhongshuang.github.io//2016/02/jdbc-category/</link>
        <guid isPermaLink="true">http://fengzhongshuang.github.io//2016/02/jdbc-category/</guid>
        
        <category>JDBC</category>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
